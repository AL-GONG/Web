{"version":3,"file":"static/js/375.12ea4802.chunk.js","mappings":"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","sources":["components/blocks/CodeViewer/CodeViewer.tsx","components/blocks/CodeViewer/index.tsx","components/pages/Solve/SolutionForm/SolutionForm.tsx","components/pages/Solve/SolutionForm/index.tsx","hooks/Solution/useCreateSolution.ts","components/pages/Solve/Solve.tsx","components/pages/Solve/index.tsx","core/entities/Solution.ts","core/useCases/Solution.ts","data/presenters/Solution.ts","core/dto/ReviewDTO.ts","data/repositories/Review.ts","di/Solution.ts","hooks/useView.ts"],"sourcesContent":["import MenuItem from \"@mui/material/MenuItem\";\nimport FormControl from \"@mui/material/FormControl\";\nimport Select, { SelectChangeEvent } from \"@mui/material/Select\";\nimport CodeMirror from \"@uiw/react-codemirror\";\nimport { StreamParser, StreamLanguage } from \"@codemirror/language\";\n\ninterface CodeViewerProps {\n  value: string;\n  isMine: boolean;\n  codeParser: StreamParser<unknown>;\n  language: string;\n  handleChange?(value: string): void;\n  handleSelectChange(event: SelectChangeEvent): void;\n}\n\nexport default function CodeViewerBlock({\n  value,\n  isMine,\n  codeParser,\n  language,\n  handleChange,\n  handleSelectChange,\n}: CodeViewerProps) {\n  return (\n    <div>\n      <FormControl sx={{ m: 1, minWidth: 70 }} size=\"small\">\n        <Select value={language} onChange={handleSelectChange} sx={{ height: 40 }}>\n          <MenuItem value=\"cpp\">C++</MenuItem>\n          <MenuItem value=\"java\">Java</MenuItem>\n          <MenuItem value=\"javascript\">JavaScript</MenuItem>\n          <MenuItem value=\"kotlin\">Kotlin</MenuItem>\n          <MenuItem value=\"python\">Python</MenuItem>\n          <MenuItem value=\"swift\">Swift</MenuItem>\n          <MenuItem value=\"typeScript\">TypeScript</MenuItem>\n        </Select>\n      </FormControl>\n      <CodeMirror \n        value={value} \n        onChange={handleChange}\n        theme=\"dark\" \n        extensions={[StreamLanguage.define(codeParser)]} \n        readOnly={!isMine}\n        onFocus={(e) => !isMine && e.target.blur()}\n      />\n    </div>\n  );\n}\n","import { SelectChangeEvent } from \"@mui/material/Select\";\nimport { StreamParser } from \"@codemirror/language\";\nimport { cpp, java, kotlin } from \"@codemirror/legacy-modes/mode/clike\";\nimport { javascript, typescript } from \"@codemirror/legacy-modes/mode/javascript\";\nimport { python } from \"@codemirror/legacy-modes/mode/python\";\nimport { swift } from \"@codemirror/legacy-modes/mode/swift\";\n\nimport CodeViewer from \"./CodeViewer\";\n\ninterface CodeViewerContainerProps {\n  value: string;\n  isMine: boolean;\n  language: string;\n  handleChange(value: string): void;\n  handleSelect(value: string): void;\n}\n\nconst getCodeParser = (language: string): StreamParser<unknown> => {\n  switch (language) {\n    case \"cpp\":\n      return cpp;\n    case \"java\":\n      return java;\n    case \"javascript\":\n      return javascript;\n    case \"kotlin\":\n      return kotlin;\n    case \"python\":\n      return python;\n    case \"swift\":\n      return swift;\n    case \"typescript\":\n      return typescript;\n    default:\n      return cpp;\n  }\n};\n\nexport default function CodeViewerContainer({\n  value,\n  isMine,\n  language,\n  handleChange,\n  handleSelect\n}: CodeViewerContainerProps) {\n\n  const handleSelectChange = (event: SelectChangeEvent) => {\n    handleSelect(event.target.value);\n  };\n\n  return (\n    <CodeViewer\n      value={value}\n      isMine={isMine}\n      handleChange={handleChange}\n      codeParser={getCodeParser(language)}\n      language={language}\n      handleSelectChange={handleSelectChange}\n    />\n  );\n}\n","import { Stack, Box, ToggleButton, ToggleButtonGroup, Typography } from \"@mui/material\";\nimport MDEditor from \"@uiw/react-md-editor\";\n\nimport \"@uiw/react-md-editor/markdown-editor.css\";\nimport \"@uiw/react-markdown-preview/markdown.css\";\n\nimport CodeViewer from \"../../../blocks/CodeViewer\";\nimport Button from \"../../../atoms/Button\";\n\ninterface SolutionFormProps {\n  code: string;\n  review: string;\n  view: string;\n  language: string;\n  isMine: boolean;\n  handleLanguage(language: string): void;\n  handleCode(value: string): void;\n  handleReview(input: string | undefined): void;\n  handleView(event: React.MouseEvent<HTMLElement>, newView: string): void;\n  handleSubmit(event: React.MouseEvent<HTMLElement>): void;\n}\n\nexport default function SolutionForm({\n  code,\n  review,\n  view,\n  language,\n  isMine,\n  handleLanguage,\n  handleCode,\n  handleReview,\n  handleView,\n  handleSubmit,\n}: SolutionFormProps) {\n  return (\n    <Stack spacing={2}>\n      <Box sx={{ display: \"flex\", flexDirection: \"row-reverse\" }}>\n        <ToggleButtonGroup value={view} exclusive onChange={handleView} size=\"small\">\n          <ToggleButton value=\"code\">\n            <Typography px={1} fontWeight={800}>\n              코드\n            </Typography>\n          </ToggleButton>\n          <ToggleButton value=\"review\">\n            <Typography px={1} fontWeight={800}>\n              리뷰\n            </Typography>\n          </ToggleButton>\n        </ToggleButtonGroup>\n      </Box>\n      {view === \"code\" ? (\n        <CodeViewer\n          value={code}\n          isMine={isMine}\n          language={language}\n          handleChange={handleCode}\n          handleSelect={handleLanguage}\n        />\n      ) : (\n        <MDEditor height={520} value={review} fullscreen={false} onChange={handleReview} />\n      )}\n      <Box>\n        <Button onClick={handleSubmit}>제출하기</Button>\n      </Box>\n    </Stack>\n  );\n}\n","import { useState, MouseEvent } from \"react\";\nimport useCreateSolution from \"../../../../hooks/Solution/useCreateSolution\";\n\nimport useView from \"../../../../hooks/useView\";\nimport Loading from \"../../../blocks/Loading\";\nimport SolutionForm from \"./SolutionForm\";\n\nexport default function SolutionFormContainer({ problemId }: { problemId: number }) {\n  const { isLoading, createSolution } = useCreateSolution(problemId);\n\n  const { view, changeView } = useView(\"code\");\n  const [code, setCode] = useState(\"\");\n  const [review, setReview] = useState(\"\");\n  const [language, setLanguage] = useState(\"cpp\");\n\n  const handleLanguage = (language: string) => {\n    setLanguage(language);\n  };\n\n  const handleCode = (value: string) => {\n    setCode(value);\n  };\n\n  const handleReview = (value: string) => {\n    setReview(value);\n  };\n\n  const handleSubmit = (event: MouseEvent<HTMLButtonElement>) => {\n    createSolution({ language, code, review });\n  };\n\n  return (\n    <>\n      <SolutionForm\n        code={code}\n        isMine={true}\n        review={review}\n        view={view}\n        language={language}\n        handleCode={handleCode}\n        handleReview={handleReview}\n        handleView={changeView}\n        handleLanguage={handleLanguage}\n        handleSubmit={handleSubmit}\n      />\n      {isLoading && <Loading />}\n    </>\n  );\n}\n","import { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useNavigate } from \"react-router-dom\";\nimport Solution from \"../../di/Solution\";\n\nexport default function useCreateSolution(problemId: number) {\n  const queryClient = useQueryClient();\n  const navigate = useNavigate();\n  const { isLoading, mutate } = useMutation(\n    ({ code, review, language }: { code: string; review: string; language: string }) =>\n      Solution.createSolution(problemId, code, review, language),\n    {\n      onSuccess: (newSolution) => {\n        queryClient.setQueryData([\"solution\", newSolution.id], newSolution);\n        navigate(`./../../solution/${newSolution.id}`, { replace: true });\n      },\n    }\n  );\n\n  return { isLoading, createSolution: mutate };\n}\n","import Wrapper from \"../../blocks/Wrapper\";\nimport SolutionForm from \"./SolutionForm\";\n\nexport default function Solve({ problemId }: { problemId: number }) {\n  return (\n    <Wrapper>\n      <SolutionForm problemId={problemId} />\n    </Wrapper>\n  );\n}","import { Navigate, useParams } from \"react-router-dom\";\nimport Solve from \"./Solve\";\n\nexport default function SolveContainer() {\n  const { problemId } = useParams();\n  if (problemId === undefined) {\n    return <Navigate to=\"/notfound\" replace={true} />;\n  }\n\n  return <Solve problemId={+problemId} />;\n}\n","import IReviewEntity from \"./interfaces/iReview\";\nimport ISolutionEntity, { ISolutionData } from \"./interfaces/iSolution\";\n\nexport default class Solution implements ISolutionEntity {\n  private readonly _id: number;\n  private readonly _code: string;\n  private readonly _readMe: string;\n  private readonly _date: Date;\n  private readonly _userId: string;\n  private readonly _userName: string;\n  private readonly _language: string;\n  private _reviews: IReviewEntity[];\n\n  constructor(params: ISolutionData) {\n    this._id = params.id;\n    this._code = params.code;\n    this._readMe = params.readMe;\n    this._date = params.date;\n    this._userId = params.userId;\n    this._userName = params.userName;\n    this._language = params.language;\n    this._reviews = [];\n  }\n\n  pushReviews(problems: IReviewEntity[]) {\n    this._reviews = this._reviews.concat(problems);\n    return this;\n  }\n\n  get id() {\n    return this._id;\n  }\n  get code() {\n    return this._code;\n  }\n  get readMe() {\n    return this._readMe;\n  }\n  get date() {\n    return this._date;\n  }\n  get userId() {\n    return this._userId;\n  }\n  get userName() {\n    return this._userName;\n  }\n  get language() {\n    return this._language;\n  }\n  get reviews() {\n    return this._reviews;\n  }\n}\n","import IReviewEntity from \"../entities/interfaces/iReview\";\nimport ISolutionEntity from \"../entities/interfaces/iSolution\";\nimport Solution from \"../entities/Solution\";\nimport ISolutionUseCase from \"./interfaces/iSolution\";\nimport IReviewRepository from \"./repository-interfaces/iReview\";\nimport ISolutionRepository from \"./repository-interfaces/iSolution\";\n\nexport default class SolutionUseCase implements ISolutionUseCase {\n  constructor(\n    private readonly solutionRepo: ISolutionRepository,\n    private readonly reviewRepo: IReviewRepository\n  ) {}\n  // Solution\n  async createSolution(\n    problemId: number,\n    code: string,\n    readMe: string,\n    language: string\n  ): Promise<ISolutionEntity> {\n    const solutionDTO = await this.solutionRepo.createSolution(problemId, code, readMe, language);\n    const solutionEntity = new Solution(solutionDTO);\n    return solutionEntity;\n  }\n  async getSolution(problemId: number): Promise<ISolutionEntity> {\n    const solutionDTO = await this.solutionRepo.getSolution(problemId);\n    const solutionEntity = new Solution(solutionDTO);\n\n    const reviewDTOList = await this.reviewRepo.getReviews(solutionEntity.id);\n    solutionEntity.pushReviews(reviewDTOList);\n\n    return solutionEntity;\n  }\n  async updateSolution(\n    problemId: number,\n    code: string,\n    readMe: string,\n    language: string\n  ): Promise<ISolutionEntity> {\n    const solutionDTO = await this.solutionRepo.updateSolution(problemId, code, readMe, language);\n    const solutionEntity = new Solution(solutionDTO);\n\n    const reviewDTOList = await this.reviewRepo.getReviews(solutionEntity.id);\n    solutionEntity.pushReviews(reviewDTOList);\n\n    return solutionEntity;\n  }\n  async deleteSolution(solutionId: number): Promise<boolean> {\n    return await this.solutionRepo.deleteSolution(solutionId);\n  }\n\n  // Review\n  async createReview(solutionId: number, content: string): Promise<IReviewEntity> {\n    return await this.reviewRepo.createReview(solutionId, content);\n  }\n  async updateReview(reviewId: number, content: string): Promise<IReviewEntity> {\n    return await this.reviewRepo.updateReview(reviewId, content);\n  }\n  async deleteReview(reviewId: number): Promise<boolean> {\n    return await this.reviewRepo.deleteReview(reviewId);\n  }\n}\n","import IReviewEntity from \"../../core/entities/interfaces/iReview\";\nimport ISolutionEntity from \"../../core/entities/interfaces/iSolution\";\nimport ISolutionUseCase from \"../../core/useCases/interfaces/iSolution\";\nimport ISolutionPresenter from \"./interfaces/iSolution\";\n\nexport default class SolutionPresenter implements ISolutionPresenter {\n  constructor(private readonly useCase: ISolutionUseCase) {}\n\n  async createSolution(\n    problemId: number,\n    code: string,\n    readMe: string,\n    language: string\n  ): Promise<ISolutionEntity> {\n    return await this.useCase.createSolution(problemId, code, readMe, language);\n  }\n  async getSolution(problemId: number): Promise<ISolutionEntity> {\n    return await this.useCase.getSolution(problemId);\n  }\n  async updateSolution(\n    problemId: number,\n    code: string,\n    readMe: string,\n    language: string\n  ): Promise<ISolutionEntity> {\n    return await this.useCase.updateSolution(problemId, code, readMe, language);\n  }\n  async deleteSolution(solutionId: number): Promise<boolean> {\n    return await this.useCase.deleteSolution(solutionId);\n  }\n\n  async createReview(solutionId: number, content: string): Promise<IReviewEntity> {\n    return await this.useCase.createReview(solutionId, content);\n  }\n  async updateReview(reviewId: number, content: string): Promise<IReviewEntity> {\n    return await this.useCase.updateReview(reviewId, content);\n  }\n  async deleteReview(reviewId: number): Promise<boolean> {\n    return await this.useCase.deleteReview(reviewId);\n  }\n}\n","export interface IReviewParams {\n  id: number;\n  userId: string;\n  userName: string;\n  content: string;\n  createdTime: Date;\n  updatedTime: Date;\n}\n\nexport interface IReviewDTO {\n  id: number;\n  userId: string;\n  userName: string;\n  content: string;\n  createdTime: Date;\n  updatedTime: Date;\n}\n\nexport default class ReviewDTO implements IReviewDTO {\n  readonly id: number;\n  readonly userId: string;\n  readonly userName: string;\n  readonly content: string;\n  readonly createdTime: Date;\n  readonly updatedTime: Date;\n\n  constructor(params: IReviewParams) {\n    this.id = params.id;\n    this.userId = params.userId;\n    this.userName = params.userName;\n    this.content = params.content;\n    this.createdTime = params.createdTime;\n    this.updatedTime = params.updatedTime;\n  }\n}\n","import ReviewDTO, { IReviewDTO, IReviewParams } from \"../../core/dto/ReviewDTO\";\nimport IReviewRepository from \"../../core/useCases/repository-interfaces/iReview\";\nimport HTTP from \"../infra/http\";\n\nexport default class ReviewRepository implements IReviewRepository {\n  async getReviews(solutionId: number): Promise<IReviewDTO[]> {\n    return await HTTP.get(`/review/${solutionId}`).then(({ data }) =>\n      data.map((el: IReviewParams) => new ReviewDTO(el))\n    );\n  }\n  async createReview(solutionId: number, content: string): Promise<IReviewDTO> {\n    return await HTTP.post(`/review`, { solutionId, content }).then(\n      ({ data }) => new ReviewDTO(data)\n    );\n  }\n  async updateReview(reviewId: number, content: string): Promise<IReviewDTO> {\n    return await HTTP.put(`/review/${reviewId}`, { content }).then(\n      ({ data }) => new ReviewDTO(data)\n    );\n  }\n  async deleteReview(reviewId: number): Promise<boolean> {\n    return await HTTP.deleteRequest(`/review/${reviewId}`).then(({ status }) => status === 200);\n  }\n}\n","import SolutionUseCase from \"../core/useCases/Solution\";\nimport SolutionPresenter from \"../data/presenters/Solution\";\nimport ReviewRepository from \"../data/repositories/Review\";\nimport SolutionRepository from \"../data/repositories/Solution\";\n\nconst solutionUseCase = new SolutionUseCase(new SolutionRepository(), new ReviewRepository());\n\nconst Solution = new SolutionPresenter(solutionUseCase);\n\nexport default Solution;\n","import { useState } from \"react\";\n\nexport default function useView(initialView: string) {\n  const [view, setView] = useState(initialView);\n\n  const changeView = (event: React.MouseEvent<HTMLElement>, newView: string) => {\n    if (newView !== null) {\n      setView(newView);\n    }\n  };\n\n  return { view, changeView };\n}"],"names":["CodeViewerBlock","value","isMine","codeParser","language","handleChange","handleSelectChange","FormControl","sx","m","minWidth","size","Select","onChange","height","MenuItem","theme","extensions","StreamLanguage","readOnly","onFocus","e","target","blur","getCodeParser","cpp","java","javascript","kotlin","python","swift","typescript","CodeViewerContainer","handleSelect","event","SolutionForm","code","review","view","handleLanguage","handleCode","handleReview","handleView","handleSubmit","Stack","spacing","Box","display","flexDirection","ToggleButtonGroup","exclusive","ToggleButton","Typography","px","fontWeight","CodeViewer","fullscreen","Button","onClick","SolutionFormContainer","problemId","queryClient","useQueryClient","navigate","useNavigate","useMutation","Solution","onSuccess","newSolution","setQueryData","id","replace","isLoading","createSolution","mutate","useCreateSolution","useView","changeView","useState","setCode","setReview","setLanguage","Loading","Solve","Wrapper","SolveContainer","useParams","undefined","to","params","_id","_code","_readMe","_date","_userId","_userName","_language","_reviews","this","readMe","date","userId","userName","problems","concat","SolutionUseCase","solutionRepo","reviewRepo","solutionDTO","solutionEntity","getSolution","getReviews","reviewDTOList","pushReviews","updateSolution","solutionId","deleteSolution","content","createReview","reviewId","updateReview","deleteReview","SolutionPresenter","useCase","ReviewDTO","createdTime","updatedTime","ReviewRepository","HTTP","then","data","map","el","status","SolutionRepository","initialView","setView","newView"],"sourceRoot":""}